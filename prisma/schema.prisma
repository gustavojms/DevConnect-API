// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId      Int          @id @default(autoincrement())
  username    String
  email       String       @unique
  password    String
  photoUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Post        Post[]
  Comment     Comment[]
  Reply       Reply[]
  Like        Like[]
  author      Task[]       @relation("author")
  responsible Task[]       @relation("responsible")
  leader      Team[]
  member      TeamMember[]
  chatMember  ChatMember[]
  role        Role[]
}

model Role {
  roleId    Int      @id @default(autoincrement())
  roleName  String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [userId])
}

model Post {
  postId     Int       @id @default(autoincrement())
  content    String
  userId     Int
  likesCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User      @relation(fields: [userId], references: [userId])
  comments   Comment[]
  likes      Like[]
}

model Comment {
  commentId Int      @id @default(autoincrement())
  content   String
  postId    Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [authorId], references: [userId])
  Post      Post     @relation(fields: [postId], references: [postId])
  replies   Reply[]
}

model Reply {
  replyId   Int      @id @default(autoincrement())
  content   String
  commentId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [userId])
  Comment   Comment  @relation(fields: [commentId], references: [commentId])
}

model Like {
  likeId    Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [userId])
  Post      Post     @relation(fields: [postId], references: [postId])
}

model Project {
  projectId       Int      @id @default(autoincrement())
  title           String
  description     String
  isPublic        Boolean
  projectOwner    Int
  parentProjectId Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  tasks           Task[]
  team            Team[]
}

model Task {
  taskId        Int       @id @default(autoincrement())
  title         String
  description   String?
  priority      String?
  status        String?
  hoursTaken    Float?
  userId        Int
  responsibleId Int?
  projectId     Int
  sprintId      Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime? @db.Date
  endedAt       DateTime? @db.Date
  author        User      @relation("author", fields: [userId], references: [userId])
  responsible   User?     @relation("responsible", fields: [responsibleId], references: [userId])
  project       Project   @relation(fields: [projectId], references: [projectId])
  sprint        Sprint?   @relation(fields: [sprintId], references: [sprintId])
}

model Team {
  teamId      Int          @id @default(autoincrement())
  teamName    String
  description String?
  leaderId    Int
  projectId   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  leader      User         @relation(fields: [leaderId], references: [userId])
  project     Project?     @relation(fields: [projectId], references: [projectId])
}

model TeamMember {
  memberId  Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    User     @relation(fields: [memberId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [teamId], onUpdate: Cascade, onDelete: Cascade)

  @@id([memberId, teamId])
}

model Chat {
  chatId    Int          @id @default(autoincrement())
  chatType  String
  chatName  String
  chatOwner Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   ChatMember[]
  messages  Message[]
}

model ChatMember {
  chatMemberId Int      @id @default(autoincrement())
  chatId       Int
  userId       Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  chat         Chat     @relation(fields: [chatId], references: [chatId])
  user         User     @relation(fields: [userId], references: [userId])
}

model Message {
  messageId Int      @id @default(autoincrement())
  content   String
  dateTime  DateTime
  sender    Int
  chatId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chat      Chat     @relation(fields: [chatId], references: [chatId])
}

model Sprint {
  sprintId Int      @id @default(autoincrement())
  title    String
  term     DateTime
  tasks    Task[]
}

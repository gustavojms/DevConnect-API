// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int     @id @default(autoincrement())
  username String
  email String    @unique
  password String
  photoUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Post Post[]
  Comment Comment[]
  Reply Reply[]
  Like Like[]
  author Task[] @relation("author")
  responsible Task[] @relation("responsible")
  member TeamMember[]
  chatMember ChatMember[]
  role Role[]
}

model Role {
  id Int     @id @default(autoincrement())
  roleName String
  userId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User User @relation(fields: [userId], references: [id])
}

model Post {
  id Int     @id @default(autoincrement())
  title String
  body String
  userId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User User @relation(fields: [userId], references: [id])
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int     @id @default(autoincrement())
  content String
  postId Int
  authorId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User User @relation(fields: [authorId], references: [id])
  Post Post @relation(fields: [postId], references: [id])
  replies Reply[]
}

model Reply {
  id Int     @id @default(autoincrement())
  content String
  commentId Int
  authorId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User User @relation(fields: [authorId], references: [id])
  Comment Comment @relation(fields: [commentId], references: [id])
}

model Like {
  id Int     @id @default(autoincrement())
  authorId Int
  postId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User User @relation(fields: [authorId], references: [id])
  Post Post @relation(fields: [postId], references: [id])
}

model Project {
  id Int     @id @default(autoincrement())
  title String
  description String
  projectOwner Int
  parentProjectId Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tasks Task[]
}

model Task {
  id Int     @id @default(autoincrement())
  title String
  description String?
  priority String
  status String
  hoursTaken Float
  authorId Int
  responsibleId Int
  projectId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author User @relation("author", fields: [authorId], references: [id])
  responsible User @relation("responsible", fields: [responsibleId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Team {
  id Int     @id @default(autoincrement())
  teamName String
  description String?
  leaderId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members TeamMember[]
}

model TeamMember {
  id Int     @id @default(autoincrement())
  memberId Int
  teamId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  member User @relation(fields: [memberId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

model Chat {
  id Int     @id @default(autoincrement())
  chatType String
  chatName String
  chatOwner Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members ChatMember[]
  messages Message[]
}

model ChatMember {
  id Int     @id @default(autoincrement())
  chatId Int
  userId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id Int     @id @default(autoincrement())
  content String
  dateTime DateTime
  sender Int
  chatId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  chat Chat @relation(fields: [chatId], references: [id])
}
